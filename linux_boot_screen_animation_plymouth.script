# [ Boot screen using Plymouth ]
# [version 1.0]
# [ Created by MANU KARTHIK K S ]

logo.image = Image("boot.png");
Window.SetBackgroundTopColor(0, 0, 0);
Window.SetBackgroundBottomColor(0, 0, 0);

if (Plymouth.GetMode () == "shutdown")
# To increase the possibility of certain shutdown messages we do a little math

{
  a = Math.Random ();
  if (a <= 0.5)
    if (a <= 0.25)
      if (a <= 0.125)
        if (a <= 0.0625)
          if (a <= 0.03125)
            logo.image = Image("shutdown1.png");
          else
            logo.image = Image("shutdown2.png");
        else
          logo.image = Image("shutdown3.png");

      else
        logo.image = Image("shutdown4.png");

    else
      logo.image = Image("shutdown5.png");
  
  else
    logo.image = Image("shutdown6.png");
}


logo.sprite = Sprite(logo.image);
logo.sprite.SetX (Window.GetX() + Window.GetWidth()  / 2 - logo.image.GetWidth()  / 2);
logo.sprite.SetY (Window.GetY() + Window.GetHeight() / 2 - logo.image.GetHeight() / 2);
logo.sprite.SetOpacity (1);

#----------------------------------------- Dialogue --------------------------------

status = "normal";

fun Setup_Dialog()
  {
    local.Rectangle;
    local.lock;
    local.entry;
    
    Rectangle.image = Image("Rectangle.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    
    Rectangle.sprite = Sprite(Rectangle.image);
    Rectangle.x = Window.GetX() + Window.GetWidth()  / 2 - Rectangle.image.GetWidth ()/2;
    Rectangle.y = Window.GetY() + Window.GetHeight() / 2 - Rectangle.image.GetHeight()/2;
    Rectangle.z = 10000;
    Rectangle.sprite.SetPosition(Rectangle.x, Rectangle.y, Rectangle.z);
    
    lock.sprite = Sprite(lock.image);
    lock.x = Rectangle.x + Rectangle.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = Rectangle.y + Rectangle.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = Rectangle.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = Rectangle.y + Rectangle.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = Rectangle.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    global.dialog.Rectangle = Rectangle;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("bullet.png");
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.Rectangle.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_traceback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_traceback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
  Setup_Dialog();
    else
  dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_traceback);
Plymouth.SetDisplayPasswordFunction(display_password_traceback);

#Progress Bar

if (Plymouth.GetMode () == "boot")
{
  progress_box.image = Image("progress_box.png");
  progress_box.sprite = Sprite(progress_box.image);

  progress_box.x = Window.GetX() + Window.GetWidth() / 2 - progress_box.image.GetWidth() / 2;
  #Enter the new value here
  progress_box.y = Window.GetY() + Window.GetHeight() * 0.65 - progress_box.image.GetHeight() / 2;
  progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);

  progress_bar.original_image = Image("progress_bar.png");
  progress_bar.sprite = Sprite();

  progress_bar.x = Window.GetX() + Window.GetWidth()  / 2 -        progress_bar.original_image.GetWidth() / 2;
  #Enter the new value here
  progress_bar.y = Window.GetY() + Window.GetHeight() / 2 * 1.3                                                                                                                                                                                                 - progress_box.image.GetHeight() / 2 + (progress_box.image.GetHeight() - progress_bar.original_image.GetHeight()) / 2;
  progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);

  fun Execution_traceback (duration, progress)
    {
      if (progress_bar.image.GetWidth () != Math.Int (progress_bar.original_image.GetWidth () * progress))
        {
          progress_bar.image = progress_bar.original_image.Scale(progress_bar.original_image.GetWidth(progress_bar.original_image) * progress, progress_bar.original_image.GetHeight());
          progress_bar.sprite.SetImage (progress_bar.image);
        }
    }

  Plymouth.SetBootProgressFunction(Execution_traceback);
}

# Quit

fun quit_traceback ()
{
  logo.sprite.SetOpacity (1);
}

Plymouth.SetQuitFunction(quit_traceback);

# Message

message_sprites = [];
message_sprite_count = 0;
message_sprite_y = 10;

fun display_message_traceback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprites[message_sprite_count] = Sprite(my_image);
  message_sprites[message_sprite_count].SetPosition(10, message_sprite_y, 10000);
  message_sprites[message_sprite_count].text = text;
  message_sprite_count++;
  message_sprite_y += my_image.GetHeight();
}

fun hide_message_traceback (text)
{
  for (i = 0; i < message_sprite_count; i++)
    {
      if (message_sprites[i].text == text)
        message_sprites[i] = NULL;
    }
}

Plymouth.SetDisplayMessageFunction (display_message_traceback);
Plymouth.SetHideMessageFunction (hide_message_traceback);
